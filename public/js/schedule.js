class ScheduleManager {
    constructor() {
        this.schedule = this.loadSchedule();
        this.days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'];
        this.hours = Array.from({length: 24}, (_, i) => i.toString().padStart(2, '0'));
        this.minutes = ['00', '15', '30', '45'];
        this.currentUser = null;
        this.checkAuthStatus();
    }

    createScheduleModal() {
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop';

        // Th√™m s·ª± ki·ªán click v√†o backdrop ƒë·ªÉ ƒë√≥ng modal
        backdrop.addEventListener('click', (e) => {
            // Ch·ªâ ƒë√≥ng khi click tr·ª±c ti·∫øp v√†o backdrop, kh√¥ng ph·∫£i v√†o modal
            if (e.target === backdrop) {
                backdrop.remove();
            }
        });

        const modal = document.createElement('div');
        modal.className = 'schedule-modal';

        // Header section
        const header = document.createElement('div');
        header.className = 'schedule-header';

        // N√∫t ƒë√≥ng
        const closeButton = document.createElement('button');
        closeButton.className = 'close-button';
        closeButton.textContent = '‚úï';
        closeButton.onclick = () => backdrop.remove();
        header.appendChild(closeButton);

        // Ti√™u ƒë·ªÅ
        const title = document.createElement('h2');
        title.textContent = 'Th·ªùi Kh√≥a Bi·ªÉu';
        title.className = 'modal-title';
        header.appendChild(title);

        // Th√™m th√¥ng tin user n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
        if (this.currentUser) {
            const userInfo = document.createElement('div');
            userInfo.className = 'schedule-user-info';
            userInfo.innerHTML = `
                <span class="user-icon">üë§</span>
                <span class="user-name">${this.currentUser.username}</span>
            `;
            header.appendChild(userInfo);
        }

        // Content section
        const content = document.createElement('div');
        content.className = 'schedule-content';

        // Form th√™m s·ª± ki·ªán
        const addEventForm = this.createAddEventForm();
        content.appendChild(addEventForm);

        // B·∫£ng th·ªùi kh√≥a bi·ªÉu
        const timetable = this.createTimetable();
        content.appendChild(timetable);

        // N√∫t ƒëi·ªÅu khi·ªÉn
        const actions = this.createActionButtons(backdrop);

        // Th√™m c√°c ph·∫ßn v√†o modal
        modal.appendChild(header);
        modal.appendChild(content);
        modal.appendChild(actions);
        backdrop.appendChild(modal);

        document.body.appendChild(backdrop);
    }

    createAddEventForm() {
        const form = document.createElement('div');
        form.className = 'add-event-form';

        // Input t√™n s·ª± ki·ªán
        const eventInput = document.createElement('input');
        eventInput.type = 'text';
        eventInput.placeholder = 'T√™n m√¥n h·ªçc/s·ª± ki·ªán';
        eventInput.className = 'schedule-input';

        // Select ng√†y
        const daySelect = document.createElement('select');
        daySelect.className = 'schedule-select';
        this.days.forEach((day, index) => {
            const option = document.createElement('option');
            option.value = index;
            option.textContent = day;
            daySelect.appendChild(option);
        });

        // Container cho th·ªùi gian b·∫Øt ƒë·∫ßu
        const startTimeContainer = document.createElement('div');
        startTimeContainer.className = 'time-select-container';
        startTimeContainer.innerHTML = '<span class="time-label">   B·∫Øt ƒë·∫ßu:</span>';

        // Select gi·ªù b·∫Øt ƒë·∫ßu
        const startHourSelect = document.createElement('select');
        startHourSelect.className = 'schedule-select time-select time-select-hour';
        this.hours.forEach(hour => {
            const option = document.createElement('option');
            option.value = hour;
            option.textContent = `${hour}h`;
            startHourSelect.appendChild(option);
        });

        // Select ph√∫t b·∫Øt ƒë·∫ßu
        const startMinuteSelect = document.createElement('select');
        startMinuteSelect.className = 'schedule-select time-select time-select-minute';
        this.minutes.forEach(minute => {
            const option = document.createElement('option');
            option.value = minute;
            option.textContent = `${minute}p`;
            startMinuteSelect.appendChild(option);
        });

        const timeSelectPair = document.createElement('div');
        timeSelectPair.className = 'time-select-pair';
        timeSelectPair.appendChild(startHourSelect);
        timeSelectPair.appendChild(startMinuteSelect);
        startTimeContainer.appendChild(timeSelectPair);

        // Container cho th·ªùi gian k·∫øt th√∫c
        const endTimeContainer = document.createElement('div');
        endTimeContainer.className = 'time-select-container';
        endTimeContainer.innerHTML = '<span class="time-label">K·∫øt th√∫c:</span>';

        // Select gi·ªù k·∫øt th√∫c
        const endHourSelect = document.createElement('select');
        endHourSelect.className = 'schedule-select time-select time-select-hour';
        this.hours.forEach(hour => {
            const option = document.createElement('option');
            option.value = hour;
            option.textContent = `${hour}h`;
            endHourSelect.appendChild(option);
        });

        // Select ph√∫t k·∫øt th√∫c
        const endMinuteSelect = document.createElement('select');
        endMinuteSelect.className = 'schedule-select time-select time-select-minute';
        this.minutes.forEach(minute => {
            const option = document.createElement('option');
            option.value = minute;
            option.textContent = `${minute}p`;
            endMinuteSelect.appendChild(option);
        });

        const endTimeSelectPair = document.createElement('div');
        endTimeSelectPair.className = 'time-select-pair';
        endTimeSelectPair.appendChild(endHourSelect);
        endTimeSelectPair.appendChild(endMinuteSelect);
        endTimeContainer.appendChild(endTimeSelectPair);

        // N√∫t th√™m
        const addButton = document.createElement('button');
        addButton.textContent = 'Th√™m';
        addButton.className = 'schedule-button save-button';
        addButton.onclick = () => {
            const startTime = `${startHourSelect.value}:${startMinuteSelect.value}`;
            const endTime = `${endHourSelect.value}:${endMinuteSelect.value}`;
            
            if (!this.isValidTimeRange(startTime, endTime)) {
                alert('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu');
                return;
            }

            this.addEvent(
                eventInput.value,
                parseInt(daySelect.value),
                startTime,
                endTime
            );
        };

        form.appendChild(eventInput);
        form.appendChild(daySelect);
        form.appendChild(startTimeContainer);
        form.appendChild(endTimeContainer);
        form.appendChild(addButton);

        return form;
    }

    isValidTimeRange(startTime, endTime) {
        const [startHour, startMinute] = startTime.split(':').map(Number);
        const [endHour, endMinute] = endTime.split(':').map(Number);
        const startMinutes = startHour * 60 + startMinute;
        const endMinutes = endHour * 60 + endMinute;
        return endMinutes > startMinutes;
    }

    createTimetable() {
        const table = document.createElement('table');
        table.className = 'timetable';

        // T·∫°o header
        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');
        const timeHeader = document.createElement('th');
        timeHeader.textContent = 'Th·ªùi gian';
        headerRow.appendChild(timeHeader);

        this.days.forEach(day => {
            const th = document.createElement('th');
            th.textContent = day;
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // L·ªçc ra c√°c khung gi·ªù c√≥ l·ªãch
        const usedTimeSlots = new Set();
        
        // Ki·ªÉm tra t·∫•t c·∫£ c√°c ng√†y v√† th·ªùi gian ƒë·ªÉ t√¨m c√°c slot c√≥ s·ª± ki·ªán
        for (let day = 0; day < 7; day++) {
            if (this.schedule[day]) {
                Object.keys(this.schedule[day]).forEach(time => {
                    if (this.schedule[day][time]?.length > 0) {
                        usedTimeSlots.add(time);
                    }
                });
            }
        }

        // N·∫øu kh√¥ng c√≥ s·ª± ki·ªán n√†o, hi·ªÉn th·ªã m·ªôt s·ªë khung gi·ªù m·∫∑c ƒë·ªãnh
        if (usedTimeSlots.size === 0) {
            ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'].forEach(time => {
                usedTimeSlots.add(time);
            });
        }

        // S·∫Øp x·∫øp c√°c khung gi·ªù theo th·ª© t·ª±
        const sortedTimeSlots = Array.from(usedTimeSlots).sort();

        // T·∫°o body
        const tbody = document.createElement('tbody');
        sortedTimeSlots.forEach(time => {
            const row = document.createElement('tr');
            const timeCell = document.createElement('td');
            timeCell.textContent = time;
            row.appendChild(timeCell);

            for (let day = 0; day < 7; day++) {
                const cell = document.createElement('td');
                const events = this.getEventsForTimeSlot(day, time);
                const hasConflict = this.hasTimeConflict(day, time);

                events.forEach(event => {
                    const eventDiv = this.createScheduleItem(event, hasConflict);
                    eventDiv.onclick = () => this.removeEvent(day, time, event);
                    cell.appendChild(eventDiv);
                });
                row.appendChild(cell);
            }
            tbody.appendChild(row);
        });
        table.appendChild(tbody);

        return table;
    }

    createActionButtons(backdrop) {
        const actions = document.createElement('div');
        actions.className = 'schedule-actions';

        // N√∫t l∆∞u
        const saveButton = document.createElement('button');
        saveButton.textContent = 'L∆∞u';
        saveButton.className = 'schedule-button save-button';
        saveButton.onclick = () => {
            this.saveSchedule();
            backdrop.remove();
        };

        // N√∫t x√≥a t·∫•t c·∫£
        const clearButton = document.createElement('button');
        clearButton.textContent = 'X√≥a t·∫•t c·∫£';
        clearButton.className = 'schedule-button clear-button';
        clearButton.onclick = () => {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô th·ªùi kh√≥a bi·ªÉu?')) {
                this.clearSchedule();
                backdrop.remove();
            }
        };

        actions.appendChild(clearButton);
        actions.appendChild(saveButton);

        return actions;
    }

    addEvent(name, day, startTime, endTime) {
        if (!name.trim()) {
            alert('Vui l√≤ng nh·∫≠p t√™n m√¥n h·ªçc/s·ª± ki·ªán');
            return;
        }

        // Ki·ªÉm tra xung ƒë·ªôt th·ªùi gian
        const conflicts = this.getConflictingEvents(day, startTime, endTime);
        
        if (conflicts.length > 0) {
            const conflictMessages = conflicts.map(conflict => conflict.message);
            const warningMessage = `Ph√°t hi·ªán xung ƒë·ªôt th·ªùi gian:\n\n${conflictMessages.join('\n')}\n\nB·∫°n c√≥ mu·ªën th√™m s·ª± ki·ªán m·ªõi kh√¥ng?`;
            
            if (!confirm(warningMessage)) {
                return;
            }
        }

        const eventData = {
            name: name,
            startTime: startTime,
            endTime: endTime
        };

        if (!this.schedule[day]) {
            this.schedule[day] = {};
        }
        if (!this.schedule[day][startTime]) {
            this.schedule[day][startTime] = [];
        }
        this.schedule[day][startTime].push(eventData);
        this.refreshSchedule();
    }

    removeEvent(day, time, event) {
        if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${event.name}"?`)) {
            this.schedule[day][time] = this.schedule[day][time].filter(e => e !== event);
            this.refreshSchedule();
        }
    }

    getEventsForTimeSlot(day, time) {
        return this.schedule[day]?.[time] || [];
    }

    refreshSchedule() {
        const modal = document.querySelector('.schedule-modal');
        if (modal) {
            const oldTable = modal.querySelector('.timetable');
            const newTable = this.createTimetable();
            oldTable.replaceWith(newTable);
        }
    }

    saveSchedule() {
        if (this.currentUser) {
            const scheduleData = {
                userId: this.currentUser.id,
                schedule: this.schedule
            };
            localStorage.setItem(`schedule_${this.currentUser.id}`, JSON.stringify(this.schedule));
            showNotification('ƒê√£ l∆∞u th·ªùi kh√≥a bi·ªÉu', 'success');
        } else {
            if (confirm('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u th·ªùi kh√≥a bi·ªÉu. B·∫°n c√≥ mu·ªën ƒëƒÉng nh·∫≠p kh√¥ng?')) {
                showLoginModal();
            } else {
                localStorage.setItem('schedule', JSON.stringify(this.schedule));
                showNotification('ƒê√£ l∆∞u th·ªùi kh√≥a bi·ªÉu t·∫°m th·ªùi', 'info');
            }
        }
    }

    loadSchedule() {
        if (this.currentUser) {
            const saved = localStorage.getItem(`schedule_${this.currentUser.id}`);
            return saved ? JSON.parse(saved) : {};
        } else {
            const saved = localStorage.getItem('schedule');
            return saved ? JSON.parse(saved) : {};
        }
    }

    clearSchedule() {
        this.schedule = {};
        this.saveSchedule();
        showNotification('ƒê√£ x√≥a to√†n b·ªô th·ªùi kh√≥a bi·ªÉu', 'info');
    }

    // Th√™m c√°c ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ki·ªÉm tra xung ƒë·ªôt th·ªùi gian
    hasTimeConflict(day, startTime, endTime) {
        // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
        if (!day || !startTime || !endTime) return false;
        if (!this.schedule[day]) return false;

        try {
            const newStart = this.timeToMinutes(startTime);
            const newEnd = this.timeToMinutes(endTime);

            // Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
            if (newStart === null || newEnd === null) return false;

            return Object.keys(this.schedule[day]).some(existingStartTime => {
                return this.schedule[day][existingStartTime].some(event => {
                    if (!event.endTime) return false;
                    
                    const existingStart = this.timeToMinutes(existingStartTime);
                    const existingEnd = this.timeToMinutes(event.endTime);
                    
                    // Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
                    if (existingStart === null || existingEnd === null) return false;
                    
                    return this.isOverlapping(newStart, newEnd, existingStart, existingEnd);
                });
            });
        } catch (error) {
            console.error('Error checking time conflict:', error);
            return false;
        }
    }

    timeToMinutes(time) {
        try {
            // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
            if (!time || typeof time !== 'string') return null;
            
            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng th·ªùi gian
            if (!time.includes(':')) return null;
            
            const [hours, minutes] = time.split(':').map(Number);
            
            // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            if (isNaN(hours) || isNaN(minutes)) return null;
            if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return null;
            
            return hours * 60 + minutes;
        } catch (error) {
            console.error('Error converting time to minutes:', error);
            return null;
        }
    }

    isOverlapping(start1, end1, start2, end2) {
        return start1 < end2 && start2 < end1;
    }

    getConflictType(start1, end1, start2, end2) {
        // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
        if (start1 === null || end1 === null || start2 === null || end2 === null) {
            return null;
        }

        // Tr√πng ho√†n to√†n
        if (start1 === start2 && end1 === end2) {
            return 'full';
        }
        
        // S·ª± ki·ªán 1 n·∫±m ho√†n to√†n trong s·ª± ki·ªán 2
        if (start1 >= start2 && end1 <= end2) {
            return 'contained';
        }
        
        // S·ª± ki·ªán 2 n·∫±m ho√†n to√†n trong s·ª± ki·ªán 1
        if (start2 >= start1 && end2 <= end1) {
            return 'contains';
        }
        
        // Tr√πng m·ªôt ph·∫ßn
        if (start1 < end2 && start2 < end1) {
            return 'partial';
        }
        
        return null;
    }

    getConflictingEvents(day, newStartTime, newEndTime) {
        if (!this.schedule[day]) return [];

        const conflicts = [];
        const newStart = this.timeToMinutes(newStartTime);
        const newEnd = this.timeToMinutes(newEndTime);

        Object.keys(this.schedule[day]).forEach(startTime => {
            this.schedule[day][startTime].forEach(event => {
                const existingStart = this.timeToMinutes(startTime);
                const existingEnd = this.timeToMinutes(event.endTime);
                
                const conflictType = this.getConflictType(newStart, newEnd, existingStart, existingEnd);
                
                if (conflictType) {
                    let conflictMessage;
                    switch (conflictType) {
                        case 'full':
                            conflictMessage = `${event.name} (${startTime}-${event.endTime}) - Tr√πng ho√†n to√†n`;
                            break;
                        case 'contained':
                            conflictMessage = `${event.name} (${startTime}-${event.endTime}) - N·∫±m trong s·ª± ki·ªán n√†y`;
                            break;
                        case 'contains':
                            conflictMessage = `${event.name} (${startTime}-${event.endTime}) - Ch·ª©a s·ª± ki·ªán n√†y`;
                            break;
                        case 'partial':
                            conflictMessage = `${event.name} (${startTime}-${event.endTime}) - Tr√πng m·ªôt ph·∫ßn`;
                            break;
                    }
                    conflicts.push({
                        message: conflictMessage,
                        type: conflictType,
                        event: event
                    });
                }
            });
        });

        return conflicts;
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o tr·ª±c quan
    createScheduleItem(event, hasConflict = false) {
        const eventDiv = document.createElement('div');
        eventDiv.className = 'schedule-item';
        
        if (hasConflict) {
            const conflicts = this.getConflictingEvents(
                event.day, 
                event.startTime, 
                event.endTime
            );
            
            if (conflicts.length > 0) {
                const conflictType = conflicts[0].type;
                eventDiv.classList.add(`schedule-conflict-${conflictType}`);
                
                // Th√™m tooltip hi·ªÉn th·ªã th√¥ng tin xung ƒë·ªôt
                eventDiv.title = conflicts.map(c => c.message).join('\n');
            }
        }
        
        eventDiv.textContent = `${event.name} (${event.startTime}-${event.endTime})`;
        return eventDiv;
    }

    // Th√™m ph∆∞∆°ng th·ª©c ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    checkAuthStatus() {
        const user = localStorage.getItem('currentUser');
        if (user) {
            this.currentUser = JSON.parse(user);
            this.loadUserSchedule();
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c t·∫£i l·ªãch c·ªßa user
    loadUserSchedule() {
        if (this.currentUser) {
            const userSchedule = localStorage.getItem(`schedule_${this.currentUser.id}`);
            if (userSchedule) {
                this.schedule = JSON.parse(userSchedule);
                this.refreshSchedule();
            }
        }
    }
}

// Kh·ªüi t·∫°o v√† g√°n v√†o window ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c file kh√°c
window.scheduleManager = new ScheduleManager();

export function createSchedule() {
    window.scheduleManager.createScheduleModal();
} 