import { CONFIG } from './config.js';
import { appendMessage, isTimeRelatedQuestion, isWeatherRelatedQuestion, extractCityName } from './utils.js';
import { sendGemmaRequest, getWeather } from './api.js';
import { PhiAI } from './phiAI.js';

/**
 * M·∫£ng l∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn gi·ªØa ng∆∞·ªùi d√πng v√† tr·ª£ l√Ω ·∫£o
 * @type {Array<{role: string, content: string}>}
 */
let messages = [];

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i h·ªôi tho·∫°i
let isFirstMessage = true;
let isWaitingForName = false;

// Thi·∫øt l·∫≠p c√°c event listener cho giao di·ªán
document.getElementById('send-button').addEventListener('click', sendMessage);
document.getElementById('user-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') sendMessage();
});

// Kh·ªüi t·∫°o Phi-2 AI
const phiAI = new PhiAI();

/**
 * X·ª≠ l√Ω v√† g·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @async
 */
async function sendMessage() {
    const userInput = document.getElementById('user-input');
    const message = userInput.value.trim();

    if (!message) return;
    
    // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng v√† x√≥a input
    appendMessage(message, true);
    userInput.value = '';

    try {
        if (isWaitingForName) {
            handleNameInput(message);
            return;
        }

        // X·ª≠ l√Ω c√°c lo·∫°i c√¢u h·ªèi ƒë·∫∑c bi·ªát
        if (await handleSpecialQueries(message)) {
            return;
        }

        // X·ª≠ l√Ω c√¢u h·ªèi th√¥ng th∆∞·ªùng qua Gemma
        await processWithGemma(message);
    } catch (error) {
        console.error('Error processing message:', error);
        appendMessage('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.', false);
    }
}

/**
 * X·ª≠ l√Ω c√°c lo·∫°i c√¢u h·ªèi ƒë·∫∑c bi·ªát (th·ªùi gian, th·ªùi ti·∫øt)
 * @param {string} message - Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @returns {Promise<boolean>} - True n·∫øu ƒë√£ x·ª≠ l√Ω c√¢u h·ªèi ƒë·∫∑c bi·ªát
 */
async function handleSpecialQueries(message) {
    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ªùi gian
    if (isTimeRelatedQuestion(message)) {
        const now = new Date();
        appendMessage(`B√¢y gi·ªù l√†: ${now.toLocaleString()}`, false);
        return true;
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt
    if (isWeatherRelatedQuestion(message)) {
        const cityName = extractCityName(message);
        if (cityName && CONFIG.ACCUWEATHER.LOCATION_KEYS[cityName.toLowerCase()]) {
            const weatherInfo = await getWeather(cityName);
            appendMessage(weatherInfo, false);
            return true;
        } else {
            appendMessage(`Xin l·ªói, t√¥i ch·ªâ c√≥ th√¥ng tin th·ªùi ti·∫øt cho c√°c th√†nh ph·ªë: ${Object.keys(CONFIG.ACCUWEATHER.LOCATION_KEYS).join(', ')}`, false);
            return true;
        }
    }

    return false;
}

/**
 * X·ª≠ l√Ω tin nh·∫Øn th√¥ng qua API Gemma
 * @param {string} message - Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 */
async function processWithGemma(message) {

    // Th√™m h·ªá th·ªëng prompt v√†o l·ªãch s·ª≠ n·∫øu ch∆∞a c√≥
    if (messages.length === 0) {
        messages.push({
            role: "system",
            content: CONFIG.PROMPT.SYSTEM
        });
    }

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    messages.push({
        role: "user",
        content: message
    });

    // G·ª≠i y√™u c·∫ßu ƒë·∫øn API Gemma
    const botResponse = await sendGemmaRequest(messages);

    // Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠
    messages.push({
        role: "assistant",
        content: botResponse
    });

    // Hi·ªÉn th·ªã ph·∫£n h·ªìi
    appendMessage(botResponse, false);
}

/**
 * Hi·ªÉn th·ªã ng√†y gi·ªù hi·ªán t·∫°i
 */
function showDateTime() {
    const now = new Date();
    const dateTimeString = now.toLocaleString();
    appendMessage(`Ng√†y v√† gi·ªù hi·ªán t·∫°i: ${dateTimeString}`, false);
}


async function showWeather() {
    try {
        const weatherInfo = await getWeather("H√† N·ªôi");
        appendMessage(weatherInfo, false);
    } catch (error) {
        console.error('Error getting weather:', error);
        appendMessage('ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt.', false);
    }
}

/**
 * B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi
 */
export function newChat() {
    const chatContainer = document.getElementById('chat-container');
    chatContainer.innerHTML = '';
    messages = [{
        role: "system",
        content: CONFIG.PROMPT.SYSTEM
    }];
    initializeChat();
}

// Th√™m h√†m kh·ªüi t·∫°o chat
function initializeChat() {
    const savedName = localStorage.getItem(CONFIG.USER.storageKey);
    if (savedName) {
        CONFIG.USER.name = savedName;
        appendMessage(`Xin ch√†o ${savedName}! üëã T√¥i c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c cho b·∫°n?`, false);
    } else {
        appendMessage(CONFIG.PROMPT.INTRODUCTION, false);
        isWaitingForName = true;
    }
}

// Th√™m h√†m x·ª≠ l√Ω input t√™n
function handleNameInput(name) {
    name = name.trim();
    if (name) {
        CONFIG.USER.name = name;
        localStorage.setItem(CONFIG.USER.storageKey, name);
        isWaitingForName = false;
        appendMessage(`Xin ch√†o ${name}! üëã T√¥i c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c cho b·∫°n?`, false);
    } else {
        appendMessage('Xin l·ªói, t√¥i ch∆∞a nghe r√µ t√™n c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng nickname kh√°c ƒë∆∞·ª£c kh√¥ng? üòÖ', false);
    }
}

// Th√™m l·ªánh kh·ªüi t·∫°o chat khi trang ƒë∆∞·ª£c load
document.addEventListener('DOMContentLoaded', () => {
    initializeChat();
    
    // ... existing event listeners ...
});

// S·ª≠ d·ª•ng class ƒë·ªÉ qu·∫£n l√Ω chat history thay v√¨ global variable
class ChatManager {
    constructor() {
        this.messages = [];
        this.specialHandlers = {
            time: this.handleTimeQuery.bind(this),
            weather: this.handleWeatherQuery.bind(this),
            schedule: this.handleScheduleQuery.bind(this),
            timer: this.handleTimerQuery.bind(this)
        };
    }

    async handleSpecialQueries(message) {
        // X·ª≠ l√Ω th·ªùi gian
        if (isTimeRelatedQuestion(message)) {
            return await this.specialHandlers.time(message);
        }

        // X·ª≠ l√Ω th·ªùi ti·∫øt
        if (isWeatherRelatedQuestion(message)) {
            return await this.specialHandlers.weather(message);
        }

        // X·ª≠ l√Ω l·ªãch tr√¨nh
        if (isScheduleRelatedQuestion(message)) {
            return await this.specialHandlers.schedule(message);
        }

        // X·ª≠ l√Ω h·∫πn gi·ªù
        if (isTimerRelatedQuestion(message)) {
            return await this.specialHandlers.timer(message);
        }

        return false;
    }

    // ... c√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω kh√°c
}
